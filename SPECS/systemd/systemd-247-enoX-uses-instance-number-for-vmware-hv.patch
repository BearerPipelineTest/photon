diff --color -rupN systemd-stable-246.1/src/udev/udev-builtin-net_id.c systemd-stable-246.1-enoX-uses-instance-number/src/udev/udev-builtin-net_id.c
--- systemd-stable-246.1/src/udev/udev-builtin-net_id.c	2020-08-07 15:09:53.000000000 +0000
+++ systemd-stable-246.1-enoX-uses-instance-number/src/udev/udev-builtin-net_id.c	2020-08-12 11:04:31.522606939 +0000
@@ -183,6 +183,28 @@ static int dev_pci_onboard(sd_device *de
         if (idx == 0 && !naming_scheme_has(NAMING_ZERO_ACPI_INDEX))
                 return -EINVAL;
 
+        if (idx >> 24) {
+                unsigned domain, bus, slot, func;
+                const char *device_sysname;
+                /*
+                 * VMware acpi_index format:
+                 * |31 instance 24|23     16|15     8|7    3|2    0|
+                 * |    number    | domain? |   bus  | slot | func |
+                 *
+                 * Let's use instance number to get enoX human readable
+                 */
+
+                r = sd_device_get_sysname(names->pcidev, &device_sysname);
+                if (r < 0)
+                        return r;
+
+                if (sscanf(device_sysname, "%x:%x:%x.%u", &domain, &bus, &slot, &func) != 4)
+                        return -ENOENT;
+
+                                if ((idx & 0xffff) == ((bus << 8) | (slot << 3) | func))
+                                        idx >>= 24;
+        }
+
         /* Some BIOSes report rubbish indexes that are excessively high (2^24-1 is an index VMware likes to
          * report for example). Let's define a cut-off where we don't consider the index reliable anymore. We
          * pick some arbitrary cut-off, which is somewhere beyond the realistic number of physical network
