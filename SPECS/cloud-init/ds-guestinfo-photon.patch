From d142af405385dd02aa70ff9baefb7960f3c86ac5 Mon Sep 17 00:00:00 2001
From: Shreenidhi Shedi <sshedi@vmware.com>
Date: Tue, 22 Jun 2021 11:14:50 +0530
Subject: [PATCH] Patch VMwareGuestInfo to handle network settings

Signed-off-by: Shreenidhi Shedi <sshedi@vmware.com>
---
 .../sources/DataSourceVMwareGuestInfo.py      | 120 +++++++++++++++++-
 1 file changed, 117 insertions(+), 3 deletions(-)

diff --git a/cloudinit/sources/DataSourceVMwareGuestInfo.py b/cloudinit/sources/DataSourceVMwareGuestInfo.py
index 19d20a2d..0da56386 100644
--- a/cloudinit/sources/DataSourceVMwareGuestInfo.py
+++ b/cloudinit/sources/DataSourceVMwareGuestInfo.py
@@ -35,6 +35,7 @@ from cloudinit import log as logging
 from cloudinit import sources
 from cloudinit import util
 from cloudinit import safeyaml
+from cloudinit.net import network_state
 
 import netifaces
 
@@ -112,6 +113,116 @@ class DataSourceVMwareGuestInfo(sources.DataSource):
         if not get_data_access_method():
             LOG.error("Failed to find vmware-rpctool")
 
+    def set_host_name(self):
+        hostname = get_guestinfo_value('hostname')
+        if hostname:
+            self.distro.set_hostname(hostname)
+            return True
+        return False
+
+    def configure_network(self):
+        net_cfg = {'version': 2, 'ethernets': {}}
+        eth_cfg = net_cfg['ethernets']
+
+        dev_index = 0
+        while True:
+            key_prefix = 'interface.' + str(dev_index)
+
+            iface_name = get_guestinfo_value(key_prefix + '.name')
+            if not iface_name:
+                break
+
+            eth_cfg[iface_name] = {'match': {}}
+            iface_cfg = eth_cfg[iface_name]
+            iface_cfg['match'].update({'name': iface_name})
+
+            mac = get_guestinfo_value(key_prefix + '.mac')
+            if mac:
+                iface_cfg['match'].update({'macaddress': mac})
+
+            key_proto = key_prefix + '.dhcp'
+            dhcp_val = get_guestinfo_value(key_proto)
+
+            dhcp_cfg_map = {
+                'yes': {'dhcp4': True, 'dhcp6': True},
+                'ipv4': {'dhcp4': True, 'dhcp6': False},
+                'ipv6': {'dhcp4': False, 'dhcp6': True},
+                'no': {'dhcp4': False, 'dhcp6': False},
+            }
+
+            address = get_guestinfo_value(key_prefix + '.address')
+            if dhcp_val and dhcp_val in {'yes', 'ipv4', 'ipv6', 'no'}:
+                iface_cfg.update(dhcp_cfg_map[dhcp_val])
+
+            if (dhcp_val and dhcp_val == 'no') or address:
+                if address:
+                    netmask = get_guestinfo_value(key_prefix + '.netmask')
+                    if netmask:
+                        netmask = network_state.mask_to_net_prefix(netmask)
+                        address += '/' + netmask
+
+                    iface_cfg['addresses'] = [address]
+                    iface_cfg.update(dhcp_cfg_map['no'])
+
+            if (not dhcp_val and not address) or \
+                    (dhcp_val == 'no' and not address):
+                LOG.warning("No static IP/DHCP given, using DHCP as default")
+                iface_cfg.update(dhcp_cfg_map['yes'])
+
+            dnsserver = get_guestinfo_value('dns.servers')
+            if dnsserver:
+                iface_cfg['nameservers'] = {'addresses': []}
+                dnsdomain = [x.strip() for x in dnsserver.split(',')]
+                for d in dnsdomain:
+                    iface_cfg['nameservers']['addresses'].append(d)
+
+            dnsdomain = get_guestinfo_value('dns.domains')
+            if dnsdomain:
+                if 'nameservers' in iface_cfg:
+                    iface_cfg['nameservers'].update({'search': []})
+                else:
+                    iface_cfg['nameservers'] = {'search': []}
+                dnsdomain = [x.strip() for x in dnsdomain.split(',')]
+                for d in dnsdomain:
+                    iface_cfg['nameservers']['search'].append(d)
+
+            route_index = 0
+            default_destination_set = False
+            while True:
+                key_route = key_prefix + '.route.' + str(route_index)
+                route = get_guestinfo_value(key_route)
+                if not route:
+                    break
+                if 'routes' not in iface_cfg:
+                    iface_cfg['routes'] = []
+                route = [x.strip() for x in route.split(',')]
+                len_route = len(route)
+                if len_route > 2:
+                    LOG.debug("Route information for %s route in %s device \
+                              incorrect - expected 2 values",
+                              route_index, dev_index)
+                    continue
+
+                if len_route == 2:
+                    # Gateway Destination
+                    d = {'via': route[0], 'to': route[1]}
+                    iface_cfg['routes'].append(d)
+                else:
+                    #length = 1
+                    if not default_destination_set:
+                        d = {'via': route[0], 'to': '0.0.0.0'}
+                        default_destination_set = True
+                    else:
+                        LOG.debug("Default destination set previously, not \
+                                  setting route %s", route_index)
+                route_index += 1
+            dev_index += 1
+
+        if net_cfg['ethernets']:
+            self.distro._write_network_config(net_cfg)
+            return True
+        return False
+
     def get_data(self):
         """
         This method should really be _get_data in accordance with the most
@@ -140,10 +251,13 @@ class DataSourceVMwareGuestInfo(sources.DataSource):
         if data_access_method == VMWARE_RPCTOOL and CLEANUP_GUESTINFO in self.metadata:
             clear_guestinfo_keys(self.metadata[CLEANUP_GUESTINFO])
 
-        if self.metadata or self.userdata_raw or self.vendordata_raw:
+        hostname = self.set_host_name()
+        net_cfg = self.configure_network()
+
+        if (self.metadata or self.userdata_raw or self.vendordata_raw or
+                hostname or net_cfg):
             return True
-        else:
-            return False
+        return False
 
     def setup(self, is_new_instance):
         """setup(is_new_instance)
-- 
2.32.0

