From f11bf190d468056cefa949b34231c7f70561976d Mon Sep 17 00:00:00 2001
From: Shreenidhi Shedi <sshedi@vmware.com>
Date: Mon, 12 Apr 2021 19:18:19 +0530
Subject: [PATCH] CVE-2021-20271: few changes to make it compatible with 4.13.x
 version

Refer below commit for full changes.
https://github.com/rpm-software-management/rpm/commit/d6a86b5e69e46cc283b1e06c92343319beb42e21

Signed-off-by: Shreenidhi Shedi <sshedi@vmware.com>
---
 lib/package.c | 123 ++++++++++++++++++++++----------------------------
 1 file changed, 55 insertions(+), 68 deletions(-)

diff --git a/lib/package.c b/lib/package.c
index 83f96d92b..d03c93195 100644
--- a/lib/package.c
+++ b/lib/package.c
@@ -21,79 +21,66 @@
 
 #include "debug.h"
 
+struct taglate_s {
+    rpmTagVal stag;
+    rpmTagVal xtag;
+    rpm_count_t count;
+} const xlateTags[] = {
+    { RPMSIGTAG_SIZE, RPMTAG_SIGSIZE, 1 },
+    { RPMSIGTAG_PGP, RPMTAG_SIGPGP, 0 },
+    { RPMSIGTAG_MD5, RPMTAG_SIGMD5, 16 },
+    { RPMSIGTAG_GPG, RPMTAG_SIGGPG, 0 },
+    /* { RPMSIGTAG_PGP5, RPMTAG_SIGPGP5, 0 }, */ /* long obsolete, dont use */
+    { RPMSIGTAG_PAYLOADSIZE, RPMTAG_ARCHIVESIZE, 1 },
+    { RPMSIGTAG_SHA1, RPMTAG_SHA1HEADER, 1 },
+    { RPMSIGTAG_DSA, RPMTAG_DSAHEADER, 0 },
+    { RPMSIGTAG_RSA, RPMTAG_RSAHEADER, 0 },
+    { RPMSIGTAG_LONGSIZE, RPMTAG_LONGSIGSIZE, 1 },
+    { RPMSIGTAG_LONGARCHIVESIZE, RPMTAG_LONGARCHIVESIZE, 1 },
+    { 0 }
+};
+
 /** \ingroup header
  * Translate and merge legacy signature tags into header.
  * @param h		header (dest)
  * @param sigh		signature header (src)
+ * @return		failing tag number, 0 on success
  */
-static void headerMergeLegacySigs(Header h, Header sigh)
+static
+rpmTagVal headerMergeLegacySigs(Header h, Header sigh, char **msg)
 {
-    HeaderIterator hi;
+    const struct taglate_s *xl;
     struct rpmtd_s td;
 
-    hi = headerInitIterator(sigh);
-    for (; headerNext(hi, &td); rpmtdFreeData(&td))
-    {
-	switch (td.tag) {
-	/* XXX Translate legacy signature tag values. */
-	case RPMSIGTAG_SIZE:
-	    td.tag = RPMTAG_SIGSIZE;
-	    break;
-	case RPMSIGTAG_PGP:
-	    td.tag = RPMTAG_SIGPGP;
-	    break;
-	case RPMSIGTAG_MD5:
-	    td.tag = RPMTAG_SIGMD5;
-	    break;
-	case RPMSIGTAG_GPG:
-	    td.tag = RPMTAG_SIGGPG;
-	    break;
-	case RPMSIGTAG_PGP5:
-	    td.tag = RPMTAG_SIGPGP5;
+    rpmtdReset(&td);
+    for (xl = xlateTags; xl->stag; xl++) {
+	/* There mustn't be one in the main header */
+	if (headerIsEntry(h, xl->xtag))
 	    break;
-	case RPMSIGTAG_PAYLOADSIZE:
-	    td.tag = RPMTAG_ARCHIVESIZE;
-	    break;
-	case RPMSIGTAG_SHA1:
-	case RPMSIGTAG_DSA:
-	case RPMSIGTAG_RSA:
-	default:
-	    if (!(td.tag >= HEADER_SIGBASE && td.tag < HEADER_TAGBASE))
-		continue;
-	    break;
-	}
-	if (td.data == NULL) continue;	/* XXX can't happen */
-	if (!headerIsEntry(h, td.tag)) {
-	    if (hdrchkType(td.type))
-		continue;
-	    if (td.count < 0 || hdrchkData(td.count))
-		continue;
-	    switch(td.type) {
-	    case RPM_NULL_TYPE:
-		continue;
+	if (headerGet(sigh, xl->stag, &td, HEADERGET_RAW|HEADERGET_MINMEM)) {
+	    /* Translate legacy tags */
+	    if (xl->stag != xl->xtag)
+		td.tag = xl->xtag;
+	    /* Ensure type and tag size match expectations */
+	    if (td.type != rpmTagGetTagType(td.tag))
 		break;
-	    case RPM_CHAR_TYPE:
-	    case RPM_INT8_TYPE:
-	    case RPM_INT16_TYPE:
-	    case RPM_INT32_TYPE:
-	    case RPM_INT64_TYPE:
-		if (td.count != 1)
-		    continue;
+	    if (td.count < 1 || td.count > 16*1024*1024)
 		break;
-	    case RPM_STRING_TYPE:
-	    case RPM_BIN_TYPE:
-		if (td.count >= 16*1024)
-		    continue;
+	    if (xl->count && td.count != xl->count)
 		break;
-	    case RPM_STRING_ARRAY_TYPE:
-	    case RPM_I18NSTRING_TYPE:
-		continue;
+	    if (!headerPut(h, &td, HEADERPUT_DEFAULT))
 		break;
-	    }
-	    (void) headerPut(h, &td, HEADERPUT_DEFAULT);
+	    rpmtdFreeData(&td);
 	}
     }
-    headerFreeIterator(hi);
+    rpmtdFreeData(&td);
+
+    if (xl->stag) {
+	rasprintf(msg, "invalid signature tag %s (%d)",
+			rpmTagGetName(xl->xtag), xl->xtag);
+    }
+
+    return xl->stag;
 }
 
 static unsigned int getKeyid(pgpDigParams sigp)
@@ -305,7 +292,7 @@ rpmRC headerVerifyRegion(rpmTagVal regionTag,
 
     /* Is the trailer within the data area? */
     if (entry->info.offset + REGION_TAG_COUNT > dl) {
-	rasprintf(buf, 
+	rasprintf(buf,
 		_("region offset: BAD, tag %d type %d offset %d count %d"),
 		entry->info.tag, entry->info.type,
 		entry->info.offset, entry->info.count);
@@ -324,7 +311,7 @@ rpmRC headerVerifyRegion(rpmTagVal regionTag,
        && entry->info.type == REGION_TAG_TYPE
        && entry->info.count == REGION_TAG_COUNT))
     {
-	rasprintf(buf, 
+	rasprintf(buf,
 		_("region trailer: BAD, tag %d type %d offset %d count %d"),
 		entry->info.tag, entry->info.type,
 		entry->info.offset, entry->info.count);
@@ -398,7 +385,7 @@ exit:
 	}
     }
 
-    if (msg) 
+    if (msg)
 	*msg = buf;
     else
 	free(buf);
@@ -420,7 +407,7 @@ rpmRC headerCheck(rpmts ts, const void * uh, size_t uc, char ** msg)
     return rc;
 }
 
-static rpmRC rpmpkgReadHeader(rpmKeyring keyring, rpmVSFlags vsflags, 
+static rpmRC rpmpkgReadHeader(rpmKeyring keyring, rpmVSFlags vsflags,
 		       FD_t fd, Header *hdrp, char ** msg)
 {
     char *buf = NULL;
@@ -441,7 +428,7 @@ static rpmRC rpmpkgReadHeader(rpmKeyring keyring, rpmVSFlags vsflags,
 
     memset(block, 0, sizeof(block));
     if ((xx = Freadall(fd, block, sizeof(block))) != sizeof(block)) {
-	rasprintf(&buf, 
+	rasprintf(&buf,
 		_("hdr size(%d): BAD, read returned %d"), (int)sizeof(block), xx);
 	goto exit;
     }
@@ -485,7 +472,7 @@ static rpmRC rpmpkgReadHeader(rpmKeyring keyring, rpmVSFlags vsflags,
         goto exit;
     }
     ei = NULL;	/* XXX will be freed with header */
-    
+
 exit:
     if (hdrp && h && rc == RPMRC_OK)
 	*hdrp = headerLink(h);
@@ -513,7 +500,7 @@ rpmRC rpmReadHeader(rpmts ts, FD_t fd, Header *hdrp, char ** msg)
     return rc;
 }
 
-static rpmRC rpmpkgRead(rpmKeyring keyring, rpmVSFlags vsflags, 
+static rpmRC rpmpkgRead(rpmKeyring keyring, rpmVSFlags vsflags,
 			FD_t fd,
 			Header * hdrp, unsigned int *keyidp, char **msg)
 {
@@ -620,7 +607,7 @@ exit:
 	if (!headerIsEntry(h, RPMTAG_SOURCEPACKAGE) && headerIsSource(h)) {
 	    headerPutString(h, RPMTAG_SOURCERPM, "(none)");
 	}
-	/* 
+	/*
          * Convert legacy headers on the fly. Not having immutable region
          * equals a truly ancient package, do full retrofit. OTOH newer
          * packages might have been built with --nodirtokens, test and handle
@@ -630,9 +617,9 @@ exit:
 	    headerConvert(h, HEADERCONV_RETROFIT_V3);
 	else if (headerIsEntry(h, RPMTAG_OLDFILENAMES))
 	    headerConvert(h, HEADERCONV_COMPRESSFILELIST);
-	
+
 	/* Append (and remap) signature tags to the metadata. */
-	headerMergeLegacySigs(h, sigh);
+	headerMergeLegacySigs(h, sigh, msg);
 
 	/* Bump reference count for return. */
 	*hdrp = headerLink(h);
-- 
2.17.1

