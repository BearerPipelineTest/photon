From 8ec31f3cf4071b4457d39adf10c65fb0a00657e5 Mon Sep 17 00:00:00 2001
From: "Demi M. Obenour" <demiobenour@gmail.com>
Date: Fri, 1 Jan 2021 12:56:13 -0500
Subject: [PATCH] Re-check header in hdrblobInit()

Functions in the public RPM API use hdrblobInit() to import an RPM
header from memory, but that skips critical checks.  Fix this by not
skipping these checks.
---
 lib/header.c | 30 ++++++++++++++++++++++++++++++
 1 file changed, 30 insertions(+)

diff --git a/lib/header.c b/lib/header.c
index 0c450bea2b..cbf944515b 100644
--- a/lib/header.c
+++ b/lib/header.c
@@ -1968,12 +1968,42 @@ rpmRC hdrblobInit(const void *uh, size_t uc,
 		rpmTagVal regionTag, int exact_size,
 		struct hdrblob_s *blob, char **emsg)
 {
+    size_t nb;
     rpmRC rc = RPMRC_FAIL;
+    int32_t il_max = HEADER_TAGS_MAX;
+    int32_t dl_max = HEADER_DATA_MAX;
+
+    if (uc && uc < 2 * sizeof(blob->ei) + sizeof(struct entryInfo_s)) {
+	rasprintf(emsg, _("hdr len: BAD, hdr len %zu too short"), uc);
+	goto exit;
+    }
+
+    if (regionTag == RPMTAG_HEADERSIGNATURES) {
+	il_max = 32;
+	dl_max = 64 * 1024 * 1024;
+    }
 
     memset(blob, 0, sizeof(*blob));
     blob->ei = (int32_t *) uh; /* discards const */
+
     blob->il = ntohl(blob->ei[0]);
+    if (hdrchkRange(il_max, blob->il)) {
+	rasprintf(emsg, _("hdr tags: BAD, no. of tags(%d) out of range"), blob->il);
+	goto exit;
+    }
+
     blob->dl = ntohl(blob->ei[1]);
+    if (hdrchkRange(dl_max, blob->dl)) {
+	rasprintf(emsg, _("hdr data: BAD, no. of bytes(%d) out of range"), blob->dl);
+	goto exit;
+    }
+
+    nb = (blob->il * sizeof(struct entryInfo_s)) + blob->dl;
+    if (uc && uc < sizeof(blob->il) + sizeof(blob->dl) + nb) {
+	rasprintf(emsg, _("hdr len: BAD, hdr len %zu too short"), uc);
+	goto exit;
+    }
+
     blob->pe = (entryInfo) &(blob->ei[2]);
     blob->pvlen = sizeof(blob->il) + sizeof(blob->dl) +
 		  (blob->il * sizeof(*blob->pe)) + blob->dl;
