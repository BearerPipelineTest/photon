From 4376ef4dcd8b2e9de642046ce77acf465efda090 Mon Sep 17 00:00:00 2001
From: Tapas Kundu <tkundu@vmware.com>
Date: Mon, 13 Jul 2020 20:47:10 +0800
Subject: [PATCH] Added latest tdnf options to pmd cli

    - search

Change-Id: I4b3a0a117a8d587fbaf0de2078a75b8f53bd8d62
Signed-off-by: Tapas Kundu <tkundu@vmware.com>
---
 client/pkgmgmt_api.c           | 84 ++++++++++++++++++++++++++++++++++
 idl/pkgmgmt.idl                |  9 ++++
 idl/pkgmgmt_privsep.idl        |  9 ++++
 include/pmd_pkgmgmt.h          |  9 ++++
 pmd.spec.in                    |  4 +-
 privsep/pkgmgmt.h              |  8 ++++
 privsep/pkgmgmtapi.c           | 55 ++++++++++++++++++++++
 privsep/pkgmgmtrpcapi.c        | 52 +++++++++++++++++++++
 server/pkgmgmtrpcapi.c         | 34 ++++++++++++++
 server/prototypes.h            | 10 ++++
 tools/cli/pkgmgmt/pkg_main.c   | 21 +++++++++
 tools/cli/pkgmgmt/prototypes.h |  8 ++++
 12 files changed, 302 insertions(+), 1 deletion(-)

diff --git a/client/pkgmgmt_api.c b/client/pkgmgmt_api.c
index bd4a25d..bac79a5 100644
--- a/client/pkgmgmt_api.c
+++ b/client/pkgmgmt_api.c
@@ -85,6 +85,90 @@ pkg_close_handle(
     return dwError;
 }
 
+uint32_t
+pkg_search_w(
+    PPMDHANDLE hHandle,
+    PPKGHANDLE hPkgHandle,
+    PTDNF_RPC_CMD_ARGS pRpcArgs,
+    PTDNF_RPC_PKGINFO_ARRAY* pRpcInfo,
+    uint32_t* punCount
+    )
+{
+    uint32_t dwError = 0;
+    if(hHandle->nPrivSep)
+    {
+        DO_RPC(pkg_privsep_rpc_search(hHandle->hRpc,
+                                      hPkgHandle,
+                                      pRpcArgs,
+                                      pRpcInfo,
+                                      punCount),
+                                      dwError);
+    }
+    else
+    {
+        DO_RPC(pkg_rpc_search(hHandle->hRpc,
+                              hPkgHandle,
+                              pRpcArgs,
+                              pRpcInfo,
+                              punCount),
+                              dwError);
+    }
+    BAIL_ON_PMD_ERROR(dwError);
+
+cleanup:
+    return dwError;
+error:
+    goto cleanup;
+
+}
+uint32_t
+pkg_search(
+    PPMDHANDLE hHandle,
+    PPKGHANDLE hPkgHandle,
+    PTDNF_CMD_ARGS pCmdArgs,
+    PTDNF_PKG_INFO* ppPkgInfo,
+    uint32_t* punCount
+    )
+{
+    uint32_t dwError = 0;
+    PTDNF_RPC_CMD_ARGS pRpcArgs = NULL;
+
+    PTDNF_RPC_PKGINFO_ARRAY pRpcInfo = NULL;
+    PTDNF_PKG_INFO pPkgInfo = NULL;
+
+    dwError = pkg_get_rpc_cmd_args(pCmdArgs, &pRpcArgs);
+    BAIL_ON_PMD_ERROR(dwError);
+
+    dwError = pkg_search_w(hHandle, hPkgHandle, pRpcArgs, &pRpcInfo, punCount);
+    BAIL_ON_PMD_ERROR(dwError);
+
+    dwError = PMDRpcClientConvertPkgInfo(pRpcInfo, &pPkgInfo);
+    BAIL_ON_PMD_ERROR(dwError);
+
+    *ppPkgInfo = pPkgInfo;
+
+cleanup:
+    if(pRpcArgs)
+    {
+        free_pkg_rpc_cmd_args(pRpcArgs);
+    }
+    if(pRpcInfo)
+    {
+        PMDRpcClientFreePkgInfoArray(pRpcInfo);
+    }
+    return dwError;
+error:
+    if(ppPkgInfo)
+    {
+        *ppPkgInfo = NULL;
+    }
+    if(pPkgInfo)
+    {
+        pkg_free_package_info_list(pPkgInfo);
+    }
+    goto cleanup;
+}
+
 uint32_t
 pkg_list_w(
     PPMDHANDLE hHandle,
diff --git a/idl/pkgmgmt.idl b/idl/pkgmgmt.idl
index 5ff34e0..0f2d5a0 100644
--- a/idl/pkgmgmt.idl
+++ b/idl/pkgmgmt.idl
@@ -46,6 +46,15 @@ typedef [context_handle] void *pkg_handle_t;
         [out] wstring_t *ppwszVersion
         );
 
+    unsigned32
+    pkg_rpc_search(
+        [in] handle_t hHandle,
+        [in] pkg_handle_t hPkgHandle,
+        [in] PTDNF_RPC_CMD_ARGS pCmdArgs,
+        [out] PTDNF_RPC_PKGINFO_ARRAY* ppPkgInfo,
+        [out] unsigned32 *punCount
+    );
+
     unsigned32
     pkg_rpc_count(
         [in] handle_t hBinding,
diff --git a/idl/pkgmgmt_privsep.idl b/idl/pkgmgmt_privsep.idl
index d02175c..5b98af1 100644
--- a/idl/pkgmgmt_privsep.idl
+++ b/idl/pkgmgmt_privsep.idl
@@ -46,6 +46,15 @@ typedef [context_handle] void *pkg_privsep_handle_t;
         [out] wstring_t *ppwszVersion
         );
 
+    unsigned32
+    pkg_privsep_rpc_search(
+        [in] handle_t hHandle,
+        [in] pkg_privsep_handle_t hPkgHandle,
+        [in] PTDNF_RPC_CMD_ARGS pCmdArgs,
+        [out] PTDNF_RPC_PKGINFO_ARRAY* ppPkgInfo,
+        [out] unsigned32 *punCount
+    );
+
     unsigned32
     pkg_privsep_rpc_count(
         [in] handle_t hBinding,
diff --git a/include/pmd_pkgmgmt.h b/include/pmd_pkgmgmt.h
index 8457c33..7177ed4 100644
--- a/include/pmd_pkgmgmt.h
+++ b/include/pmd_pkgmgmt.h
@@ -35,6 +35,15 @@ pkg_close_handle(
     PPKGHANDLE hPkgHandle
     );
 
+uint32_t
+pkg_search(
+    PPMDHANDLE hHandle,
+    PPKGHANDLE hPkgHandle,
+    PTDNF_CMD_ARGS pCmdArgs,
+    PTDNF_PKG_INFO* ppPkgInfo,
+    uint32_t* punCount
+    );
+
 uint32_t
 pkg_list(
     PPMDHANDLE hHandle,
diff --git a/pmd.spec.in b/pmd.spec.in
index cc7b5f7..8aa4976 100644
--- a/pmd.spec.in
+++ b/pmd.spec.in
@@ -5,7 +5,7 @@
 Summary:	Photon Management Daemon
 Name:		pmd
 Version:	@VERSION@
-Release:	3%{?dist}
+Release:	4%{?dist}
 License:	Apache 2.0
 URL:            https://www.github.com/vmware/pmd
 Group:		Applications/System
@@ -302,6 +302,8 @@ rm -rf %{buildroot}/*
     %{_python3_sitearch}/%{name}_python-*.egg-info
 
 %changelog
+*       Fri Jul 24 2020 Tapas Kundu <tkundu@vmware.com> 0.1-4
+-       Add search command
 *       Sat May 16 2020 Tapas Kundu <tkundu@vmware.com> 0.1-3
 -       fix TDNFUpdateInfoSummary
 -       compatible with netmgmt 1.2.0
diff --git a/privsep/pkgmgmt.h b/privsep/pkgmgmt.h
index 5901cc6..f40b0f3 100644
--- a/privsep/pkgmgmt.h
+++ b/privsep/pkgmgmt.h
@@ -32,6 +32,14 @@ pkg_get_scope_from_string(
     TDNF_SCOPE *pnScope
     );
 
+unsigned32
+pkg_search_s(
+    PTDNF pTdnf,
+    PTDNF_CMD_ARGS pCmdArgs,
+    PTDNF_PKG_INFO *ppPkgInfo,
+    uint32_t* punCount
+    );
+
 unsigned32
 pkg_count_s(
     PTDNF pTdnf,
diff --git a/privsep/pkgmgmtapi.c b/privsep/pkgmgmtapi.c
index 229d3d0..294daf3 100644
--- a/privsep/pkgmgmtapi.c
+++ b/privsep/pkgmgmtapi.c
@@ -92,6 +92,61 @@ pkg_close_handle_s(
     goto cleanup;
 }
 
+unsigned32
+pkg_search_s(
+    PTDNF pTdnf,
+    PTDNF_CMD_ARGS pCmdArgs,
+    PTDNF_PKG_INFO *ppPkgInfo,
+    uint32_t* punCount
+    )
+{
+    uint32_t dwError = 0;
+    int nLocked = 0;
+    PTDNF_PKG_INFO pPkgInfo;
+    uint32_t dwCount = 0;
+
+    if(!pTdnf || !pCmdArgs || !ppPkgInfo)
+    {
+        dwError = ERROR_PMD_INVALID_PARAMETER;
+        BAIL_ON_PMD_ERROR(dwError);
+    }
+
+    pthread_mutex_lock(&gpServerEnv->mutexPkgMgmtApi);
+    nLocked = 1;
+
+    dwError = TDNFSearchCommand(pTdnf, pCmdArgs, &pPkgInfo, &dwCount);
+    BAIL_ON_PMD_ERROR(dwError);
+
+    pthread_mutex_unlock(&gpServerEnv->mutexPkgMgmtApi);
+    nLocked = 0;
+
+    *ppPkgInfo = pPkgInfo;
+    *punCount = dwCount;
+cleanup:
+    if(nLocked)
+    {
+        pthread_mutex_unlock(&gpServerEnv->mutexPkgMgmtApi);
+        nLocked = 0;
+    }
+    return dwError;
+error:
+    if(ppPkgInfo)
+    {
+        *ppPkgInfo = NULL;
+    }
+    if(punCount)
+    {
+        *punCount = 0;
+    }
+    if(pPkgInfo)
+    {
+        TDNFFreePackageInfoArray(pPkgInfo, dwCount);
+    }
+    goto cleanup;
+}
+
+
+
 unsigned32
 pkg_count_s(
     PTDNF pTdnf,
diff --git a/privsep/pkgmgmtrpcapi.c b/privsep/pkgmgmtrpcapi.c
index 6d1a1e9..ea1d250 100644
--- a/privsep/pkgmgmtrpcapi.c
+++ b/privsep/pkgmgmtrpcapi.c
@@ -86,6 +86,58 @@ pkg_privsep_rpc_close_handle(
     goto cleanup;
 }
 
+unsigned32
+pkg_privsep_rpc_search(
+    handle_t hBinding,
+    pkg_privsep_handle_t hPkgHandle,
+    PTDNF_RPC_CMD_ARGS pRpcArgs,
+    PTDNF_RPC_PKGINFO_ARRAY *ppInfo,
+    uint32_t* punCount
+    )
+{
+    uint32_t dwError = 0;
+    uint32_t dwCount = 0;
+
+    PTDNF_RPC_PKGINFO_ARRAY pInfo = NULL;
+    PTDNF_PKG_INFO pPkgInfo = NULL;
+
+    PTDNF_CMD_ARGS pArgs = NULL;
+    if(!hBinding || !hPkgHandle || !pRpcArgs || !ppInfo)
+    {
+        dwError = ERROR_PMD_INVALID_PARAMETER;
+        BAIL_ON_PMD_ERROR(dwError);
+    }
+
+    dwError = pkg_rpc_get_cmd_args(pRpcArgs, &pArgs);
+    BAIL_ON_PMD_ERROR(dwError);
+
+    dwError = check_connection_integrity(hBinding);
+    BAIL_ON_PMD_ERROR(dwError);
+
+    dwError =  pkg_search_s(hPkgHandle, pArgs, &pPkgInfo, &dwCount);
+    BAIL_ON_PMD_ERROR(dwError);
+
+    dwError = PMDRpcServerConvertPkgInfoArray(pPkgInfo, dwCount, &pInfo);
+    BAIL_ON_PMD_ERROR(dwError);
+
+    *ppInfo = pInfo;
+    *punCount = dwCount;
+
+cleanup:
+    if(pPkgInfo)
+    {
+        TDNFFreePackageInfoArray(pPkgInfo, dwCount);
+    }
+    return dwError;
+error:
+    if(pInfo)
+    {
+        PMDRpcServerFreeMemory(pInfo);
+    }
+    goto cleanup;
+}
+
+
 unsigned32
 pkg_privsep_rpc_count(
     handle_t hBinding,
diff --git a/server/pkgmgmtrpcapi.c b/server/pkgmgmtrpcapi.c
index 05a520f..93c6d79 100644
--- a/server/pkgmgmtrpcapi.c
+++ b/server/pkgmgmtrpcapi.c
@@ -91,6 +91,40 @@ pkg_rpc_close_handle(
     goto cleanup;
 }
 
+unsigned32
+pkg_rpc_search(
+    handle_t hBinding,
+    pkg_handle_t hPkgHandle,
+    PTDNF_RPC_CMD_ARGS pCmdArgs,
+    PTDNF_RPC_PKGINFO_ARRAY* ppPkgInfo,
+    uint32_t* punCount
+    )
+{
+    uint32_t dwError = 0;
+    uint32_t dwCount = 0;
+    PPMDHANDLE hPMD = NULL;
+
+    if(!hBinding || !hPkgHandle || !pCmdArgs || !ppPkgInfo)
+    {
+        dwError = ERROR_PMD_INVALID_PARAMETER;
+        BAIL_ON_PMD_ERROR(dwError);
+    }
+
+    CHECK_RPC_ACCESS(hBinding, dwError);
+
+    dwError = privsep_handle_list_get(hPkgHandle, &hPMD);
+    BAIL_ON_PMD_ERROR(dwError);
+
+    dwError = pkg_search_w(hPMD, hPkgHandle, pCmdArgs, ppPkgInfo, &dwCount);
+    BAIL_ON_PMD_ERROR(dwError);
+
+    *punCount = dwCount;
+cleanup:
+    return dwError;
+error:
+    goto cleanup;
+}
+
 unsigned32
 pkg_rpc_count(
     handle_t hBinding,
diff --git a/server/prototypes.h b/server/prototypes.h
index 45434f9..0e81383 100644
--- a/server/prototypes.h
+++ b/server/prototypes.h
@@ -766,6 +766,16 @@ pkg_version_s(
     wstring_t *ppwszVersion
     );
 //pkgmgmt privsep related
+
+uint32_t
+pkg_search_w(
+    PPMDHANDLE hHandle,
+    PPKGHANDLE hPkgHandle,
+    PTDNF_RPC_CMD_ARGS pRpcArgs,
+    PTDNF_RPC_PKGINFO_ARRAY* pRpcInfo,
+    uint32_t* punCount
+    );
+
 uint32_t
 pkg_list_w(
     PPMDHANDLE hHandle,
diff --git a/tools/cli/pkgmgmt/pkg_main.c b/tools/cli/pkgmgmt/pkg_main.c
index e1ade91..4772a94 100644
--- a/tools/cli/pkgmgmt/pkg_main.c
+++ b/tools/cli/pkgmgmt/pkg_main.c
@@ -24,6 +24,10 @@ pkg_main(
     PTDNF_CMD_ARGS pCmdArgs = NULL;
     TDNF_CLI_CMD_MAP arCmdMap[] =
     {
+        {"autoerase",          TDNFCliAutoEraseCommand},
+        {"autoremove",         TDNFCliAutoEraseCommand},
+        {"check",              TDNFCliCheckCommand},
+        {"check-local",        TDNFCliCheckLocalCommand},
         {"check-update",       TDNFCliCheckUpdateCommand},
         {"clean",              TDNFCliCleanCommand},
         {"count",              TDNFCliCountCommand},
@@ -64,6 +68,7 @@ pkg_main(
     stContext.pFnRepoList   = pkg_invoke_repolist;
     stContext.pFnResolve    = pkg_invoke_resolve;
     stContext.pFnUpdateInfo = pkg_invoke_updateinfo;
+    stContext.pFnSearch     = pkg_invoke_search;
     stContext.pFnUpdateInfoSummary = pkg_invoke_updateinfo_summary;
 
     dwError = pkg_parse_args(argc, argv, &pCmdArgs);
@@ -141,6 +146,22 @@ pkg_main(
     goto cleanup;
 }
 
+uint32_t
+pkg_invoke_search(
+    PTDNF_CLI_CONTEXT pContext,
+    PTDNF_CMD_ARGS pCmdArgs,
+    PTDNF_PKG_INFO* ppPkgInfo,
+    uint32_t* punCount
+    )
+{
+    PPMD_PKG_CLI_CONTEXT pLocalContext = pContext->pUserData;
+    return pkg_search(pLocalContext->hPMD,
+                      pLocalContext->hPkgHandle,
+                      pCmdArgs,
+                      ppPkgInfo,
+                      punCount);
+}
+
 uint32_t
 pkg_invoke_alter(
     PTDNF_CLI_CONTEXT pContext,
diff --git a/tools/cli/pkgmgmt/prototypes.h b/tools/cli/pkgmgmt/prototypes.h
index 9615872..e0da729 100644
--- a/tools/cli/pkgmgmt/prototypes.h
+++ b/tools/cli/pkgmgmt/prototypes.h
@@ -22,6 +22,14 @@ pkg_exec_cmd(
     char* const* argv,
     PTDNF_CMD_ARGS pCmdArgs);
 
+uint32_t
+pkg_invoke_search(
+    PTDNF_CLI_CONTEXT pContext,
+    PTDNF_CMD_ARGS pCmdArgs,
+    PTDNF_PKG_INFO* ppPkgInfo,
+    uint32_t* punCount
+    );
+
 uint32_t
 pkg_invoke_alter(
     PTDNF_CLI_CONTEXT pContext,
