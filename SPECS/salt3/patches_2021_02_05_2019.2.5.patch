From 10c9a5c33689b5cea2b1f810569b71b16027bd39 Mon Sep 17 00:00:00 2001
From: "Daniel A. Wozniak" <dwozniak@vmware.com>
Date: Thu, 4 Feb 2021 13:28:08 -0700
Subject: [PATCH] Runners fix

---
 salt/client/mixins.py  | 37 +++++++++++++++++++++++++++++++------
 salt/master.py         |  3 ++-
 salt/wheel/__init__.py |  4 ++--
 3 files changed, 35 insertions(+), 9 deletions(-)

diff --git a/salt/client/mixins.py b/salt/client/mixins.py
index d77d1cd255..d6a14f0f66 100644
--- a/salt/client/mixins.py
+++ b/salt/client/mixins.py
@@ -455,10 +455,10 @@ class AsyncClientMixin(object):
     client = None
     tag_prefix = None
 
-    def _proc_function(self, fun, low, user, tag, jid, daemonize=True):
+    def _proc_function_remote(self, fun, low, user, tag, jid, daemonize=True):
         '''
-        Run this method in a multiprocess target to execute the function in a
-        multiprocess and fire the return data on the event bus
+        Run this method in a multiprocess target to execute the function on the
+        master and fire the return data on the event bus
         '''
         if daemonize and not salt.utils.platform.is_windows():
             # Shutdown the multiprocessing before daemonizing
@@ -479,6 +479,27 @@ class AsyncClientMixin(object):
         except salt.exceptions.EauthAuthenticationError as exc:
             log.error(exc)
 
+    def _proc_function(self, fun, low, user, tag, jid, daemonize=True):
+        '''
+        Run this method in a multiprocess target to execute the function
+        locally and fire the return data on the event bus
+        '''
+        if daemonize and not salt.utils.platform.is_windows():
+            # Shutdown the multiprocessing before daemonizing
+            salt.log.setup.shutdown_multiprocessing_logging()
+
+            salt.utils.process.daemonize()
+
+            # Reconfigure multiprocessing logging after daemonizing
+            salt.log.setup.setup_multiprocessing_logging()
+
+        # pack a few things into low
+        low["__jid__"] = jid
+        low["__user__"] = user
+        low["__tag__"] = tag
+
+        return self.low(fun, low)
+
     def cmd_async(self, low):
         '''
         Execute a function asynchronously; eauth is respected
@@ -505,15 +526,19 @@ class AsyncClientMixin(object):
         tag = salt.utils.event.tagify(jid, prefix=self.tag_prefix)
         return {'tag': tag, 'jid': jid}
 
-    def asynchronous(self, fun, low, user='UNKNOWN', pub=None):
+    def asynchronous(self, fun, low, user="UNKNOWN", pub=None, local=True):
         '''
         Execute the function in a multiprocess and return the event tag to use
         to watch for the return
         '''
+        if local:
+            proc_func = self._proc_function
+        else:
+            proc_func = self._proc_function_remote
         async_pub = pub if pub is not None else self._gen_async_pub()
-
         proc = salt.utils.process.SignalHandlingMultiprocessingProcess(
-                target=self._proc_function,
+                target=proc_func,
+                name="ProcessFunc",
                 args=(fun, low, user, async_pub['tag'], async_pub['jid']))
         with salt.utils.process.default_signals(signal.SIGINT, signal.SIGTERM):
             # Reset current signals before starting the process in
diff --git a/salt/master.py b/salt/master.py
index 58ad1bbdbc..44d7579b80 100644
--- a/salt/master.py
+++ b/salt/master.py
@@ -1983,7 +1983,8 @@ class ClearFuncs(TransportMethods):
             runner_client = salt.runner.RunnerClient(self.opts)
             return runner_client.asynchronous(fun,
                                               clear_load.get('kwarg', {}),
-                                              username)
+                                              username,
+                                              local=True)
         except Exception as exc:
             log.error('Exception occurred while introspecting %s: %s', fun, exc)
             return {'error': {'name': exc.__class__.__name__,
diff --git a/salt/wheel/__init__.py b/salt/wheel/__init__.py
index ab32d81b0a..871be838e1 100644
--- a/salt/wheel/__init__.py
+++ b/salt/wheel/__init__.py
@@ -124,8 +124,8 @@ class WheelClient(salt.client.mixins.SyncClientMixin,
             })
             {'jid': '20131219224744416681', 'tag': 'salt/wheel/20131219224744416681'}
         '''
-        fun = low.get('fun')
-        return self.asynchronous(fun, low)
+        fun = low.get("fun")
+        return self.asynchronous(fun, low, local=False)
 
     def cmd(self, fun, arg=None, pub_data=None, kwarg=None, print_event=True, full_return=False):
         '''
-- 
2.29.2

